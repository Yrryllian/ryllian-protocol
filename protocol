// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/utils/Strings.sol";

contract RyllianOffering {
    IERC20 public ryllianToken;
    address public immutable vault;
    uint256 public constant OFFERING_AMOUNT = 8888 * 1e18;
    mapping(address => bool) public hasOffered;

    event OfferingMade(address indexed from, uint256 timestamp, string veilHash);

    constructor(address _tokenAddress, address _vaultAddress) {
        ryllianToken = IERC20(_tokenAddress);
        vault = _vaultAddress;
    }

    function offerWithoutWitness() external {
        require(!hasOffered[msg.sender], "Only once may you offer without witness.");
        require(
            ryllianToken.balanceOf(msg.sender) >= OFFERING_AMOUNT,
            "Insufficient $RYLLIAN for offering."
        );

        bool success = ryllianToken.transferFrom(
            msg.sender,
            vault,
            OFFERING_AMOUNT
        );
        require(success, "Offering failed: token transfer error.");

        hasOffered[msg.sender] = true;
        string memory veilHash = generateVeilHash(msg.sender, block.timestamp);
        emit OfferingMade(msg.sender, block.timestamp, veilHash);
    }

    function generateVeilHash(address sender, uint256 time)
        internal
        pure
        returns (string memory)
    {
        bytes32 hash = keccak256(abi.encodePacked(sender, time));
        return Strings.toHexString(uint256(hash), 64);
    }
}
